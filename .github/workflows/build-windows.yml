name: Build Windows Executable

on:
  release:
    types: [published]   # Trigger when a release is published

jobs:
  build_windows:
    runs-on: windows-latest

    steps:
      - name: Checkout repository into workspace root
        uses: actions/checkout@v4
        with:
          path: '.'           # force checkout into the workspace root
          clean: true
          fetch-depth: 0

      - name: Show workspace (debug)
        shell: pwsh
        run: |
          Write-Host "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          Write-Host "Working dir:"
          pwd
          Write-Host "Top-level files and dirs:"
          Get-ChildItem -Force $env:GITHUB_WORKSPACE | Sort-Object Name | Format-Table -AutoSize

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip setuptools wheel
          $req = Join-Path $env:GITHUB_WORKSPACE "dependency-installs\requirements.txt"
          if (Test-Path $req) {
            Write-Host "Installing from $req"
            pip install -r $req
          } else {
            Write-Host "requirements file not found; installing common deps"
            pip install pyinstaller pynacl mnemonic cryptography rich base58
          }

      - name: Ensure PyInstaller
        shell: pwsh
        run: |
          pip install --upgrade pyinstaller

      - name: Build EXE with PyInstaller (include repo files)
        shell: pwsh
        run: |
          # ensure we are in the repo root
          Set-Location -Path $env:GITHUB_WORKSPACE
          Write-Host "Building from: $(Get-Location)"
          Write-Host "Repo listing:"
          Get-ChildItem -Force

          # Exclude these top-level entries from being added (adjust if needed)
          $excludeNames = @('.git', '.github', 'dist', 'build', '__pycache__', '.venv', '.venv*', '.gitignore')

          # Build add-data args for every top-level item not excluded
          $addDataArgs = @()
          $topItems = Get-ChildItem -LiteralPath $env:GITHUB_WORKSPACE -Force | Where-Object {
            $excludeNames -notcontains $_.Name
          }
          foreach ($item in $topItems) {
            # skip the workflow file itself optionally (uncomment if you want)
            # if ($item.Name -eq ".github") { continue }

            $src = Join-Path $env:GITHUB_WORKSPACE $item.Name
            # destination inside the frozen app will be the same top-level name
            $dest = $item.Name
            # PyInstaller on Windows uses ";" to separate src and dest
            $arg = "$src;$dest"
            Write-Host "Including: $arg"
            $addDataArgs += "--add-data"
            $addDataArgs += $arg
          }

          # Ensure vanity.py exists
          if (-Not (Test-Path ".\vanity.py")) {
            Write-Host "ERROR: vanity.py not found at repository root. Update the path or place vanity.py in repo root."
            exit 1
          }

          # Compose arguments and run pyinstaller
          $pyArgs = @("--onefile", "--console") + $addDataArgs + @("$env:GITHUB_WORKSPACE\vanity.py")
          Write-Host "Running PyInstaller with args:"
          Write-Host ($pyArgs -join " ")

          pyinstaller @pyArgs

      - name: Check dist and zip exe
        shell: pwsh
        run: |
          Set-Location -Path $env:GITHUB_WORKSPACE
          if (-Not (Test-Path ".\dist\vanity.exe")) {
            Write-Host "ERROR: dist\\vanity.exe not found. PyInstaller probably failed; see previous logs."
            if (Test-Path ".\dist") { Get-ChildItem -LiteralPath ".\dist" -Recurse -Force }
            exit 1
          }
          Write-Host "dist contents:"
          Get-ChildItem ".\dist" -Force
          # Zip the executable
          if (Test-Path ".\vanity.zip") { Remove-Item ".\vanity.zip" -Force }
          Compress-Archive -Path ".\dist\vanity.exe" -DestinationPath ".\vanity.zip"
          Write-Host "Created vanity.zip"

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./vanity.zip
          asset_name: vanity.zip
          asset_content_type: application/zip

      - name: Upload artifact (Actions UI)
        uses: actions/upload-artifact@v4
        with:
          name: vanity-windows-exe
          path: vanity.zip
