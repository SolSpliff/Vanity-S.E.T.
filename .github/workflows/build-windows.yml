name: Build Vanity EXE (Windows)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Show workspace info (debug)
        shell: pwsh
        run: |
          Write-Host "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          Write-Host "Current user:"
          whoami
          Write-Host "PWD before cd:"
          pwd
          Write-Host "Top-level files/dirs:"
          Get-ChildItem -LiteralPath $env:GITHUB_WORKSPACE -Force | Format-Table -AutoSize

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (from dependency-installs/requirements.txt if present)
        shell: pwsh
        run: |
          python -m pip install --upgrade pip setuptools wheel
          $reqPath = Join-Path $env:GITHUB_WORKSPACE "dependency-installs\\requirements.txt"
          if (Test-Path $reqPath) {
            Write-Host "Installing from $reqPath"
            pip install -r $reqPath
          } else {
            Write-Host "No dependency-installs/requirements.txt found; installing common deps"
            pip install pyinstaller pynacl mnemonic cryptography rich base58
          }

      - name: Ensure PyInstaller is installed
        shell: pwsh
        run: |
          pip install --upgrade pyinstaller

      - name: Build EXE with PyInstaller (robust)
        shell: pwsh
        run: |
          # Force the working directory to the checked-out repo
          Set-Location -Path $env:GITHUB_WORKSPACE
          Write-Host "Building from: $(Get-Location)"
          Write-Host "Repo root listing:"
          Get-ChildItem -Force

          # Build a list of add-data args only for directories that exist
          $addDataArgs = @()
          $candidates = @(
            @{src="config"; dest="config"},
            @{src="vane"; dest="vane"},
            @{src="dependency-installs"; dest="dependency-installs"}
          )
          foreach ($c in $candidates) {
            $srcPath = Join-Path $env:GITHUB_WORKSPACE $c.src
            if (Test-Path $srcPath) {
              # PyInstaller on Windows expects "src;dest"
              $arg = "$srcPath;$($c.dest)"
              Write-Host "Including data: $arg"
              $addDataArgs += "--add-data"
              $addDataArgs += $arg
            } else {
              Write-Host "Not including missing path: $srcPath"
            }
          }

          # Compose PyInstaller command
          $pyinstallerArgs = @("--onefile","--console")
          $pyinstallerArgs += $addDataArgs
          $pyinstallerArgs += "$env:GITHUB_WORKSPACE\vanity.py"

          Write-Host "Running PyInstaller with args:"
          Write-Host ($pyinstallerArgs -join " ")

          # Run PyInstaller (pipe output live)
          pyinstaller @pyinstallerArgs

      - name: Show dist contents (debug)
        shell: pwsh
        run: |
          Set-Location -Path $env:GITHUB_WORKSPACE
          if (Test-Path ".\dist") {
            Write-Host "dist contents:"
            Get-ChildItem -LiteralPath ".\dist" -Force
          } else {
            Write-Host "No dist directory produced. Check build logs above."
          }

      - name: Upload built EXE artifact
        uses: actions/upload-artifact@v4
        with:
          name: vanity-windows-exe
          path: dist/vanity.exe
