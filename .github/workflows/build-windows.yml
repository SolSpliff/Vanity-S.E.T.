name: Build Vanity-S.E.T.

on:
  push:
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          path: vanity

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        shell: bash
        run: |
          python -m pip install --upgrade pip setuptools wheel
          REQ="$GITHUB_WORKSPACE/vanity/dependency-installs/requirements.txt"
          if [ -f "$REQ" ]; then
            echo "Installing from $REQ"
            pip install -r "$REQ"
          else
            echo "No requirements.txt found; installing common deps"
            pip install pyinstaller pynacl mnemonic cryptography rich base58
          fi

      - name: Ensure PyInstaller
        run: pip install --upgrade pyinstaller

      - name: Build executable with PyInstaller
        shell: bash
        run: |
          cd "$GITHUB_WORKSPACE/vanity"
          echo "Building from: $(pwd)"
          ls -la

          if [ ! -f "vanity.py" ]; then
            echo "ERROR: vanity.py not found in repository root; aborting build."
            exit 1
          fi

          ADDDATA=""
          for c in config vane dependency-installs; do
            if [ -d "$c" ]; then
              echo "Including data: $c"
              ADDDATA="$ADDDATA --add-data $(pwd)/$c:$c"
            else
              echo "Skipping missing: $c"
            fi
          done

          pyinstaller --onefile --console $ADDDATA vanity.py

      - name: Package artifact
        shell: bash
        run: |
          cd vanity/dist
          # Pick the correct filename depending on OS
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            OUTFILE="vanity-windows.exe"
            zip ../$OUTFILE.zip vanity.exe
          elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            OUTFILE="vanity-linux"
            mv vanity $OUTFILE
            zip ../$OUTFILE.zip $OUTFILE
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            OUTFILE="vanity-macos"
            mv vanity $OUTFILE
            zip ../$OUTFILE.zip $OUTFILE
          fi
          cd ../..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: vanity-${{ matrix.os }}
          path: vanity/*.zip
