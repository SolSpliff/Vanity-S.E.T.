name: Build Vanity EXE (Windows)

on:
  workflow_dispatch:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repository into workspace (safe)
        uses: actions/checkout@v4
        with:
          # Force checkout into the runner workspace root (avoid repo-name path issues)
          path: '.'
          clean: true
          fetch-depth: 0

      - name: Show workspace info (debug)
        shell: pwsh
        run: |
          Write-Host "GITHUB_WORKSPACE: $env:GITHUB_WORKSPACE"
          Write-Host "Current directory (pwd):"
          pwd
          Write-Host "Top-level files/dirs:"
          Get-ChildItem -LiteralPath $env:GITHUB_WORKSPACE -Force | Format-Table -AutoSize

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (from dependency-installs/requirements.txt if present)
        shell: pwsh
        run: |
          python -m pip install --upgrade pip setuptools wheel
          $reqPath = Join-Path $env:GITHUB_WORKSPACE "dependency-installs\\requirements.txt"
          if (Test-Path $reqPath) {
            Write-Host "Installing from $reqPath"
            pip install -r $reqPath
          } else {
            Write-Host "No dependency-installs/requirements.txt found; installing common deps"
            pip install pyinstaller pynacl mnemonic cryptography rich base58
          }

      - name: Ensure PyInstaller is installed
        shell: pwsh
        run: |
          pip install --upgrade pyinstaller

      - name: Build EXE with PyInstaller (robust)
        shell: pwsh
        run: |
          # Ensure we are inside the checked-out repo
          Set-Location -Path $env:GITHUB_WORKSPACE
          Write-Host "Building from: $(Get-Location)"
          Write-Host "Repo root listing:"
          Get-ChildItem -Force

          if (-Not (Test-Path ".\vanity.py")) {
            Write-Host "ERROR: vanity.py not found in repository root; aborting build."
            exit 1
          }

          # Build list of --add-data args only for paths that exist
          $addDataArgs = @()
          $candidates = @(
            @{src="config"; dest="config"},
            @{src="vane"; dest="vane"},
            @{src="dependency-installs"; dest="dependency-installs"}
          )
          foreach ($c in $candidates) {
            if (Test-Path $c.src) {
              $arg = "$env:GITHUB_WORKSPACE\$($c.src);$($c.dest)"
              Write-Host "Including data: $arg"
              $addDataArgs += "--add-data"
              $addDataArgs += $arg
            } else {
              Write-Host "Skipping missing path: $($c.src)"
            }
          }

          $pyinstallerArgs = @("--onefile","--console")
          $pyinstallerArgs += $addDataArgs
          $pyinstallerArgs += "$env:GITHUB_WORKSPACE\vanity.py"

          Write-Host "Running PyInstaller with args:"
          Write-Host ($pyinstallerArgs -join " ")

          pyinstaller @pyinstallerArgs

      - name: Show dist contents (debug)
        shell: pwsh
        run: |
          Set-Location -Path $env:GITHUB_WORKSPACE
          if (Test-Path ".\dist\vanity.exe") {
            Write-Host "dist contents:"
            Get-ChildItem -LiteralPath ".\dist" -Force
          } else {
            Write-Host "No dist/vanity.exe produced. See previous logs for errors."
            if (Test-Path ".\dist") { Get-ChildItem -LiteralPath ".\dist" -Recurse -Force }
            exit 1
          }

      - name: Upload built EXE artifact
        uses: actions/upload-artifact@v4
        with:
          name: vanity-windows-exe
          path: dist/vanity.exe
